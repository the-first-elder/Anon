use dep::std;

fn test_nft_ownership() {
    // Real ECDSA secp256k1 public key (compressed format)
    let owner_pubkey_x = [
        0x02, 0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87,
        0x0B, 0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16,
        0xF8, 0x17,
    ];

    let owner_pubkey_y = [
        0x48, 0x3A, 0xDA, 0x77, 0x26, 0xA3, 0xC4, 0x65, 0x5D, 0xA4, 0xFB, 0xFC, 0x0E, 0x11, 0x08,
        0xA8, 0xFD, 0x17, 0xB4, 0x48, 0xA6, 0x85, 0x54, 0x19, 0x9C, 0x47, 0xD0, 0x8F, 0xFB, 0x10,
        0xD4, 0xB8,
    ];

    // Sample token ID
    let token_id = 1;

    // Message to be signed (hash of some data)
    let message = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F,
    ];

    // ECDSA signature (r, s values concatenated)
    let signature = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];

    // Merkle proof data for a simple tree
    let siblings = [
        0x12345678, // First level sibling
        0x87654321, // Second level sibling
        0xABCDEF12, // Third level sibling
    ];

    let path = [true, false, true]; // Path indicating left/right at each level
    let root = 0xDEADBEEF; // Merkle root

    let proof = MerkleProof { siblings: siblings, path: path, root: root };

    let input = NFTOwnershipInput {
        owner_pubkey_x: owner_pubkey_x,
        owner_pubkey_y: owner_pubkey_y,
        token_id: token_id,
        message: message,
        signature: signature,
        proof: proof,
    };

    // Run the main function
    main(input);
}
