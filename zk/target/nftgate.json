{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2465695666210009418,"abi":{"parameters":[{"name":"input","type":{"kind":"struct","path":"VERIFY_USER","fields":[{"name":"owner_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"owner_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"message","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7WX9W9bBxRGn5e2y5iZ0nWQsR3biT1qug46ZqYkrbOMmSnllJkpUf/R9pOfpdP0/Nb2SZGvTiTLsnzv+b5K0X3mTv+dLOfK6b++8jVP/zxWEXaRsD5hC4QtFLZI2MXC+oVdIuxSYZcJu1zYFcKuFHaVsKuFXSPsWmHXCbte2A3CbhR2k7Cbhd0i7FZhtwm7Xdgdwu4UdpewAWGLhd0tbImwe4TdK+w+YfcLGxT2gLAHhT0k7GFhjwh7VNhjwqrCasKGhNWFNYQ1hQ0LGxHWEtYW9riwJ4Q9KewpYU8LWypsVNgyYc8IWy7sWWHPCXte2AvCVgh7UdhLwl4W9oqwV4W9Jux1YW8Ie1PYW8LeFvaOsHeFvSfsfWEfCPtQ2EfCPhb2ibBPhX0m7HNhY8LGhU0IWylslbCOsElhXwibEvalsK+EfS3sG2HfCvtO2PfCfhD2o7CfhP0s7Bdhvwr7Tdjvwv4Q9qewv4T9LewfYf8K+0/Y/8Kmha0WtkbYWmHrhK0XtkHYRmEzwjYJ2yxsi7CtwrYJ2y5sh7CdwnYJ2y1sj7C9wvYJ2y/sgLCDwg4JOyzsiLCjwo4JOy7sBNii8rUAq2Ce3zd6M/vFwnnv15vZI/oxszewL7AnsB+wF7APsAcw/zP3M+8z5zPfM9czzzPHM78ztzOvM6cznzOXM48zhw9gXoyZeXsJZuZr5mrmaeboQczMzczLzMnMx8zFzMPMwcy/zL3Mu8y5zLfMtcyzzLHMr8ytzKvMqcynzKXMo8yhY5jHMdP3KzHT7/Q6fU6PT2Gmt+lrepp+ppfpY3qY/qV36Vt6ln6lV+lTepT+pDfpS3qSfqQX6UN6cBrzasz0HT1Hv9Fr9Bk9NoOZ3qKv6Cn6iV6ij+gh+ofeoW/oGfqFXqFP6BH6g96gL+gJ+oFeoA/ogVHMyzCzby3HzH7FXsU+xR61AjN7E/sSexL7EXsR+xB7EPsPew/7DnsO+w17DfsMewz7C3sL+wp7CvsJewn7SK+HzBVnPpXydbR8rZ7bU5vDe9Wrw41GZ2SoU6vXxqtD7YlWs9poTgy3aq1as9VcNdSq1zutRmukPdEeqbZrjXqnNtls1yfLN7uQn3P2PH7OfLYF5XvNzvvMyTR95f+TXZJZelkl2SSZJFkkGSTZI5kjWSMZI9kimSJZIhki2SGZIVkhGSHZIJkgWSAZIO6P8+P6gaLr9jg9Lo/D4+44O64eLLpujpPj4jg47o1z49p8+XFrnBqXxqFxZ5wZV8aRcWOcGBfGgXFfnLe0/G6z29np7HJ2OLubnc2uZkezm9nJ7GJ2MLuXncuuZceyW9mp7FJ2KLuTncmuZEeyG9mJ7EJ2IL/9/ObzWx8rum6NU+PSODTujDPjyqmi68Y4MS6MA+O+OC+ui+PitjgtLovD4q44K66Ko+KmOCkuioPinjgnrpkuum6JU+KSOCTuiDPiipmi64Y4IS6IA3L7c/Nz63Pjc9tz03PLc8Nzu3Ozc6tzo3Obc5Nzi3ODc3tzc3Nre09vb2aLs59T6vCRxSgYAAA=","debug_symbols":"bY1bCsMgEEX3Mt/5iCGVxq2UEnwGQVR8FIpk752ECin0b869nDsNlBZ1W603IQN7NHBB8mKDR2pA6HiGOXJ/cC48FWDzch9AewWMTss+gLFO403254AK+afQeerKbfxREESyztltvf7G+MWT5cLpL5rq5aUt79ib7scUpFY16WPp7HD+Aw==","file_map":{"61":{"source":"use dep::std::{ ecdsa_secp256k1::verify_signature};\n\n\n// Custom Merkle Proof struct\n// struct MerkleProof {\n//     siblings: str<64>,\n//     path: bool,\n//     root: Field,\n// }\n\n// Input struct\nstruct VERIFY_USER {\n    owner_pubkey_x: [u8; 32],\n    owner_pubkey_y: [u8; 32],\n    // token_id: Field,\n    message: [u8; 32], // Fixed size message\n    signature: [u8; 64], // [r, s]\n    // proof: MerkleProof,\n}\n\nfn main(input: VERIFY_USER) -> pub bool {\n    // 1. Verify signature\n    let is_valid = verify_signature(\n        input.owner_pubkey_x,\n        input.owner_pubkey_y,\n        input.signature,\n        input.message,\n    );\n    assert(is_valid);\n    is_valid\n}\n","path":"/Users/thefirstelder/Documents/noir_lang/nftgate/zk/src/main.nr"}},"names":["main"],"brillig_names":[]}